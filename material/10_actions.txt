// type PayloadAction<PL, AN = string> = {
//   actionName: AN,
//   payload: PL
// }
type IncrementAction = {
  incrementBy: number
}

type MultiplyAction = {
  multiplyBy: number;
}

const reducers = {
  increment(state: any, action: IncrementAction) {
  },
  multiply(state: any, action: MultiplyAction) {
  }
};

// Aufgabe: ich will ein Objekt, dass aus Funktionen besteht,
// die genauso hei√üen, wie in reducers,
// deren Keys aber Funktionen sind, die vom der action sind

type MakeActionCreatorFunction<F> =
  F extends (state: any, action: infer A) => any ?
  (action: A) => void : never;

type I = MakeActionCreatorFunction<typeof reducers.increment>

type ActionCreators<R extends object> = {
  [K in keyof R]: MakeActionCreatorFunction<R[K]>
}
type Z = ActionCreators<typeof reducers>


